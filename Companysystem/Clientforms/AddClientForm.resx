<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABGdBTUEAALGPC/xhBQAADU5JREFUeF7t
        3buOlGcWheFO4QogJ0fiJhABOTeBREBCZk4Nzfnkw4TcgUVouA9SRExEhkCaWZ8A4T36jU27qrrq288j
        vZJlWz0SKtXa4+7+aw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAttDxdD7tp+fpVXqd3n9p/PX4e+OfjX/nbDqWAIAdcyZdSX+kT+m/P9jH9Hu6nMbXAgC2
        2Ml0kD6kpWE/TONrja85vjYAsGUupTdpacRX0fja438DANgCJ9KLtDTa6+hlOpUAgCNyOr1NS0O9zt6l
        cwkA2LALaWmcN9nFBABsyE9paZCPonGIAABrtk3j/7XxrQgAYE22cfxH4+cQxg8jAgArtq3j/7XxmwgA
        wApt+/h/zXMCAGBFdmX8R+NhQZ4YCAD/0i6N/9fGY4MBgEPaxfEfjc8O8AFCAHAIuzr+XxufRAgA/IBd
        H//R+BhiAOAfmmH8R5/S8QQA/I1Zxv9r5xMA8B2zjf9oPwEAf2HG8R89TwDAglnHf/QqAQD/Z+bxH71O
        AMCfzD7+o/cJAPiiw/iPHAAA8EWX8R/5FgAARKfxH/khQADa6zb+I78GCEBrHcd/5EFAALTVdfxHHgUM
        QEudx9+HAQHQUufxH/k4YADa6T7+oysJANow/nt7H9KZBAAtGP/PHSQAaMH4f+5NOpkAYHrG/1uXEgBM
        z/h/60UCgOkZ/2+9TScSAEzN+NdOJwCYmvGvXUgAMDXjXxt/HgAwNeNfM/4ATM/4164mAJia8a9dSwAw
        NeNfM/4ATM/4164nAJia8a/dSAAwNeNfM/4ATM/4124mAJia8a8ZfwCmZ/xr+wkApmb8a7cSAEzN+NeM
        PwDTM/612wkApmb8awcJAKZm/GvGH4DpGf/anQQAUzP+NeMPwPSMf+1uAoCpGf/avQQAUzP+NeMPwPSM
        f+1+AoCpGf/agwQAUzP+NeMPwPSMf+1hAoCpGf+a8Qdgesa/9igBwNSMf+1xAoCpGf+a8Qdgesa/9iQB
        wNSMf+1pAoCpGf+a8Qdgesa/9iwBwNSMf834AzA941/7OQHA1Ix/7ZcEAFMz/jXjD8D0jH/t1wQAUzP+
        td8SAEzN+NeMPwDTM/61/yQAmJrxrxl/AKZn/Gv+sz8A0zP+NeMPwPSMf82v+gEwPeNfM/4ATM/414w/
        ANMz/jWP9wVgesa/ZvwBmJ7xr/lIXwCmZ/xrxh+A6Rn/mvEHYHrGv/YsAcDUjH/N+AMwPeNfe5oAYGrG
        v2b8AZie8a8ZfwCmZ/xrTxIATM3414w/ANMz/rXHCQCmZvxrxh+A6Rn/mvEHYHrGv/YoAcDUjH/N+AMw
        PeNfe5gAYGrGv2b8AZie8a89SAAwNeNfM/4ATM/414w/ANMz/rX7CQCmZvxrxh+A6Rn/2r0EAFMz/jXj
        D8D0jH/N+AMwPeNfu5sAYGrGv2b8AZie8a/dSQAwNeNfM/4ATM/414w/ANMz/rWDBABTM/414w/A9Ix/
        7XYCgKkZ/5rxB2B6xr92KwHA1Ix/zfgDMD3jXzP+AEzP+Nf2EwBMzfjXjD8A0zP+tZsJAKZm/GvGH4Dp
        Gf+a8Qdgesa/diMBwNSMf834AzA941+7ngBgasa/ZvwBmJ7xrxl/AKZn/GvXEgBMzfjXjD8A0zP+tasJ
        AKZm/GvGH4DpGf+a8Qdgesa/Nv48AGBqxr9m/AGYnvGXpL299+l1epWep/10Nh1LMB3jL0nf72P6PV1O
        ZxLsPOMvST/Wh3SQTibYScZfkg7fm3QpwU4x/pK0ml6mUwm2nvGXpNX2Lp1LsLWMvyStr4sJts54YS69
        YCVJq+tCgq0x/tPU0gtVkrT6Tic4cuOHU8b3p5ZepJKk1fc2nUhwpMZPqC69QCVJ6+tFgiMzfkd16YUp
        SVp/nhPAkRhPqRoPqlh6UUqS1t94D/bEQDZuPKpy6QUpSdpc470YNmZ8WMV4XvXSi1GStLnGe7EPEGJj
        xidWLb0QJUmb70qCjRgfW7n0IpQkbb4/EqzdsTQ+u3rpRShJ2nyf0vEEa3U2Lb0AJUlH1/kEa7Wfll58
        kqSja7w3w1o9T0svPknS0TXem2GtXqWlF58k6ega782wVq/T0otPknR0jfdmWKv3aenFJ0k6usZ7M6yV
        A0CSti8HAGvnWwCStH35FgBr54cAJWn78kOArJ1fA5Sk7cuvAbJ2HgQkSduXBwGxdh4FLEnbl0cBs3Y+
        DEiStisfBsTG+DhgSdqefBwwG3M5Lb0IJUmb70qCjTiTPqSlF6IkaXON9+Lxngwbc5CWXoySpM013oth
        o06mN2npBSlJWn/jPXi8F8PGXUpLL0pJ0vob78FwZF6mpRemJGl9vUhwpE6ld2npBSpJWn1v04kER+5c
        WnqRSpJW3+kEW+NiWnqhSpJW14UEW+entPSClST9+8b/0YKt5QiQpNU2fs5qfKsVtp4jQJJW0/hNq/HD
        1rAzHAGSdPjGQ378nj87yxEgST/WeLb/eLyvJ/yx8xwBkvT9PqbxMevjk1Z9sA9TcQRI0t7e+/Q6vUrP
        0346m44lmJYjoDb+PACgBUdAzREAQBuOgNrVBAAtOAJqjgAA2nAE1BwBALThCKhdSwDQgiOg5ggAoA1H
        QO16AoAWHAE1RwAAbTgCao4AANpwBNRuJABowRFQcwQA0IYjoHYzAUALjoCaIwCANhwBNUcAAG04Amrj
        M8QBoAVHQM0RAEAbjoDarQQALTgCao4AANpwBNQcAQC04Qio3U4A0IIjoOYIAKANR0DtIAFAC46AmiMA
        gDYcAbU7CQBacATUHAEAtOEIqDkCAGjDEVC7mwCgBUdAzREAQBuOgNq9BAAtOAJqjgAA2nAE1BwBALTh
        CKjdTwDQgiOg5ggAoA1HQO1BAoAWHAE1RwAAbTgCao4AANpwBNQeJgBowRFQcwQA0IYjoPYoAUALjoCa
        IwCANhwBtccJAFpwBNQcAQC04QioOQIAaMMRUHuSAKAFR0DNEQBAG46A2tMEAC04AmqOAADacATUHAEA
        tOEIqD1LANCCI6DmCACgDUdA7ecEAC04AmqOAADacATUHAEAtOEIqP2SAKAFR0DNEQBAG46A2q8JAFpw
        BNQcAQC04QioOQIAaMMRUPstAUALjoCaIwCANhwBtf8kAGjBEVBzBADQhiOg5tsBALThCKg5AgBowxFQ
        8yuCALThCKh5bDAAbTgCao4AANpwBNR8lDAAbTgCas8SALTgCKg5AgBowxFQe5oAoAVHQM0RAEAbjoDa
        kwQALTgCao8TALTgCKg5AgBowxFQe5QAoAVHQO1hAoAWHAE1RwAAbTgCag8SALTgCKg5AgBowxFQu58A
        oAVHQO1eAoAWHAE1RwAAbTgCancTALTgCKjdSQDQgiOg5ggAoA1HQO0gAUALjoCaIwCANhwBtdsJAFpw
        BNRuJQBowRFQcwQA0IYjoLafAKAFR0DtZgKAFhwBNUcAAG04Amo3EgC04AioOQIAaMMRULueAKAFR0Dt
        WgKAFhwBNUcAAG04AmpXEwC04AiojT8PAGjBEVBzBADQhiOgdiEBQAuOgNrpBAAtOAK+9TadSADQgiPg
        Wy8SALThCPjWpQQAbTgCPvcmnUwA0IYj4HMHCQBacQTs7X1IZxIAtOII2Nu7kgCgne5HwB8JAFrqfAR8
        SscTALTU+Qg4nwCgra5HwH4CgNY6HgHPEwC01+0IeJUAgOh0BLxOAMAXXY6A9wkA+JMOR4ADAAAWzH4E
        +BYAAPyFmY8APwQIAN8x6xHg1wAB4G/MeAR4EBAA/AOzHQEeBQwA/9AsR4APAwKAHzTDEeDjgAHgEHb9
        CLiSAIBD2NUj4EM6kwCAQ9rFI+AgAQD/0i4dAW/SyQQArMCuHAGXEgCwQtt+BLxIAMAabOsR8DadSADA
        mmzjEXA6AQBrtk1HwIUEAGzIGN6lQd5kFxMAsGHjP72P778vjfM6e5fOJQDgiIwfvhs/gb801OvoZTqV
        AIAtMH4HfzyIZ2m0V9H42n7PHwC20HgK33gU73ge/9KIH6bxtcbX9IQ/ANhy48N4xifyjY/lHZ/NvzTs
        3+tj+j1dTj7YBwB20PF0Pu2n5+lVep3ef2n89fh745+Nf+dsOpYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoJG9vf8By+r4WNZVlWkAAAAASUVORK5CYII=
</value>
  </data>
</root>